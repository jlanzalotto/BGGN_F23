---
title: "class-13"
format: pdf
---

```{r}
# Complete the missing code
library(AnnotationDbi)
library("org.Hs.eg.db")
library(pathview)
library(gage)
library(gageData)
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

```
Q1. How many genes are in this dataset? 


```{r}
dim(counts)
```
38694

Q2. How many ‘control’ cell lines do we have? 
```{r}
sum(metadata$dex=="control")


```

```{r} 
#very helpful way to only extract rows where a column = value
control.inds <-metadata$dex=="control"
metadata[control.inds,]

```

```{r}
control.mean<-rowMeans(counts[,control.inds])
head(control.mean)

```

Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

# you could combine everything together eg treated.control <-rowMeans(counts[,metadata$dex=="control"])

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)
```{r}
treated.mean <-rowMeans(counts[,metadata$dex=="treated"])
head(treated.mean)


```

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.
and 6 I guess

```{r}
library(ggplot2)
meancounts<-data.frame(control.mean,treated.mean)
  
ggplot(meancounts,aes(x=control.mean,y=treated.mean))+
  geom_point(alpha=.2)

```
Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

```{r}
ggplot(meancounts,aes(x=control.mean,y=treated.mean))+
  scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")+
  geom_point(alpha=.2)

```

#Add Log2FC column 

```{r}
meancounts$log2fc <-log2(meancounts$treated.mean/meancounts$control.mean)

```

exclude any genes with zero counts as we can't say anything about them anyway-- instead i just keep the nonzero 

```{r}
to.keep.inds <-rowSums(meancounts[,1:2]==0) == 0
my_counts <- meancounts[to.keep.inds,]
dim(my_counts)
```

21817 genes remaining

How many genes are up vs downregulated? 
```{r}
up.ind <- my_counts$log2fc > 2
sum(up.ind)
down.ind <- my_counts$log2fc < (-2)
sum(down.ind)

```
Q10. Do you trust these results? Why or why not?


No, we haven't considered statistical significance 

#Running DESeq

```{r}
library(DESeq2)
dds<-DESeqDataSetFromMatrix(countData=counts, 
                       colData=metadata,
                       design=~dex
                       )
dds <- DESeq(dds)

```

```{r}
res<-results(dds)
head(res)
```

```{r}
plot(res$log2FoldChange,-log(res$padj))
abline(v=c(-2,2),col="red")
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "black" 
mycols[ abs(res$log2FoldChange) < -2 ]  <- "black" 


inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)

ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
#write.csv(res[ord,], "deseq_results.csv")

```


```{r}
library(AnnotationDbi)
library("org.Hs.eg.db")


res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```

```{r}
#advanced volcano
library(EnhancedVolcano)
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```    

Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)

```

```{r}
library(AnnotationDbi)
library("org.Hs.eg.db")
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)

foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)

```


```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
pathview(gene.data=foldchanges, pathway.id="hsa05310")

#![]("hsa05310.pathview.png")
```